syntax = "proto3";

package vignette.messaging;

option go_package = "github.com/entativa/vignette/proto/messaging";

// Messaging Service - E2EE messaging with Signal protocol
service MessagingService {
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
  rpc GetConversations(GetConversationsRequest) returns (GetConversationsResponse);
  rpc MarkAsRead(MarkAsReadRequest) returns (MarkAsReadResponse);
  
  // Key management
  rpc UploadPreKeys(UploadPreKeysRequest) returns (UploadPreKeysResponse);
  rpc GetPreKeys(GetPreKeysRequest) returns (GetPreKeysResponse);
}

message SendMessageRequest {
  string sender_id = 1;
  string recipient_id = 2;
  bytes encrypted_content = 3; // Signal-encrypted
  string message_type = 4; // text, image, video, etc
}

message SendMessageResponse {
  string message_id = 1;
  bool success = 2;
  string timestamp = 3;
}

message GetMessagesRequest {
  string user_id = 1;
  string conversation_id = 2;
  int32 limit = 3;
  int32 offset = 4;
}

message GetMessagesResponse {
  repeated Message messages = 1;
  int32 total = 2;
}

message Message {
  string message_id = 1;
  string sender_id = 2;
  string recipient_id = 3;
  bytes encrypted_content = 4;
  string message_type = 5;
  string timestamp = 6;
  bool is_read = 7;
}

message GetConversationsRequest {
  string user_id = 1;
  int32 limit = 2;
  int32 offset = 3;
}

message GetConversationsResponse {
  repeated Conversation conversations = 1;
}

message Conversation {
  string conversation_id = 1;
  string other_user_id = 2;
  Message last_message = 3;
  int32 unread_count = 4;
}

message MarkAsReadRequest {
  string message_id = 1;
  string user_id = 2;
}

message MarkAsReadResponse {
  bool success = 1;
}

// Key management
message UploadPreKeysRequest {
  string user_id = 1;
  bytes identity_key = 2;
  bytes signed_pre_key = 3;
  repeated bytes one_time_pre_keys = 4;
}

message UploadPreKeysResponse {
  bool success = 1;
}

message GetPreKeysRequest {
  string user_id = 1;
}

message GetPreKeysResponse {
  bytes identity_key = 1;
  bytes signed_pre_key = 2;
  bytes one_time_pre_key = 3;
}
